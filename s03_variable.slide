# Golang 安裝與環境設定
為什麼我要學習 Go
19:30 28 Mar 2020
Tags: golang, go, cht
Summary: This is a great document you want to read.
OldURL: former-path-for-this-doc

陳敬翔
資訊學系培訓師, 中華電信學院
oneleo@cht.com.tw
https://github.com/oneleo
@oneleo760823

// --------------------------------------------------

## Golang 安裝與環境設定

// --------------------------------------------------

## Golang 安裝與環境設定

- 變數、函式、結構、介面、方法命名

	- 在 Go 程式中扮演資料儲存、傳遞的角色。
    - 名稱只允許大小寫英文、數字與底線（不建議用底線），且第一個字元不能是數字
    - 名稱開頭決定使用權限（是否可跨套件引用、導入），除了大寫英文開頭是 Public，其他開頭（習慣用小寫英文開頭）均為 private
    - 名稱不能命名 25 個[關鍵字][1]，且不推薦命名 37 個（可被更改別名的）[保留字][2]
	- 名稱命名推薦採駝峰式記法，如 MixedCaps、SetName 等，而不用底線區隔
    - 介面（interface）命名習慣 -er 結尾，但不推薦與官方 Reader、Writer、Closer、Flusher、Stringer 等介面名衝突
    - 註：其他細節可參考此[官方文章][3]

[1]: https://golang.org/ref/spec#Keywords
[2]: https://github.com/golang/go/blob/master/src/builtin/builtin.go
[3]: https://golang.org/doc/effective_go.html#names "Names"

: 補充：
: - 介面（interface）中建議只含一種方法（Structural Typing／Compile Time Duck Typing）

// --------------------------------------------------

## Golang 安裝與環境設定

- 變數宣告

.image ./images/i03/i03.00.03-memory.png _ 500


// --------------------------------------------------

## Golang 安裝與環境設定

.play -numbers -edit ./code/c03/c03p01variables/variables.go /START OMIT/,/END OMIT/

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	1. 對同一個變數進行第二次宣告：
		```go
		quantity := 4
		quantity := 4
		```
		- ↪ 同一個變數只能宣告一次（縱使您可以隨時指派新的值給它，您也可以在別的範圍（如：不同函式內）宣告同一個變數名稱。）
		
	2. 刪除短變數宣告的「:」：_quantity <del>:</del>= 4_
		- ↪ 假如您忘了「:」，它會被當作指派而不是宣告，而您不能對還沒宣告的變數指派值。

	3. 把 string 的值指派給 int 的變數：
		```go
		quantity := 4
		quantity = "a"
		```
		- ↪ 變數只能指派同一個型別的值

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	4. 變數與值的數量不同：_length, width:=1.2<del>, 2.4</del>_
		- ↪ 您得提供每一個變數相對應的值，反過來說每一個值都得對應到一個變數。

	5. 移除有用到變數的程式碼：_<del>fmt.Println(customerName)</del>_
		- ↪ 所有的變數都應該在您的程式中被使用到。假如您移除了用到變數的程式碼，您也得移除該變數的宣告。（或使用「_」符號來忽略）
		
			```go
			quantity, length, width, _ := declaration03()
			```
// --------------------------------------------------

## Golang 安裝與環境設定

- 25 個關鍵字

.image ./images/i03/i03.00.01-keywords.png _ 500

// --------------------------------------------------

## Golang 安裝與環境設定

- 39 個保留字
	- 這些內部預先定義的名字不是關鍵字，您可以再重新定義它們。
	- 但不建議重新定義保留字，除了增加維護上困難，且易引起語義混亂。

.play -numbers -edit ./code/c03/c03p02predeclared/predeclared.go /START OMIT/,/END OMIT/

.image ./images/i03/i03.00.02-predeclared.png _ 500

: 補充：
: - 每一個記憶體位址指向一個 8 bits 空間。

// --------------------------------------------------

## Golang 安裝與環境設定

- 變數範圍

.play -numbers -edit ./code/c03/c03p03overflow/overflow.go /START OMIT/,/END OMIT/

.image ./images/i03/i03.00.04-range.png _ 1000



// --------------------------------------------------

## Golang 安裝與環境設定

- 運算符號

.image ./images/i03/i03.00.05-operators.png _ 1000

// --------------------------------------------------

## Golang 安裝與環境設定

- 變數範圍
	- [逸出符號][1]

[1]: https://pkg.go.dev/fmt

.play -numbers -edit ./code/c03/c03p04operators/operators.go /START OMIT/,/END OMIT/



// --------------------------------------------------

## Golang 安裝與環境設定

- 邏輯

.image ./images/i03/i03.00.07-logical.png _ 1000

// --------------------------------------------------

## Golang 安裝與環境設定

- 優先度

.image ./images/i03/i03.00.06-precedence.png _ 500

// --------------------------------------------------

## Golang 安裝與環境設定

- iota 只能在常數中使用

.play -numbers -edit ./code/c03/c03p05iota/iota.go /START OMIT/,/END OMIT/

// --------------------------------------------------

## Golang 安裝與環境設定

- 註解（comments）：不會計入真正的程式碼，所以可用一般文字敘述來撰寫。
	- Go 程式碼中的註解有兩種：
		- 單行註解，以雙鈄線（//）開頭，後面跟著註解敘述。
		- 多行註解，前後使用「/*」與「*/」包夾的區塊。

	- Go 註解的其他功能
		- 建立套件文件（在 package mypack 之前撰寫註解文件）
			```go
			// Package c01c01mymath 是在中華電信學院開設的 Go 語言課程第一章節所建立的套件，…
			package c01p01mymath
			```
		- 建立函式文件（在 func myfunc 之前撰寫註解文件）
			```go
			// Sum 是一個加總計算功能的函式，…
			func Sum(in ...int) (sum int) {
			```
		- [指定套件編譯平臺][1]（在 Go 程式碼檔案第一行撰寫註解平臺）
			```go
			// +build linux darwin
			// +build !windows
			```
[1]: https://golang.org/cmd/go/#hdr-Build_constraints "Build constraints"

// --------------------------------------------------

## Golang 安裝與環境設定

- 註解（comments）

	- Go 註解的其他功能
		- [在 Go 投影片中決定要顯示開頭及結尾][1]
			```go
			// START OMIT
			func main() {
			…
			// END OMIT
			```
		- [在 Go 投影片中決定此行是否粗體顯示][1]
			```go
			…
			m.HandleFunc("/", helloHandler) // HL
			…
			```
		- 撰寫 C 程式碼（在 import "C" 之前撰寫註解 C 程式碼）
			```go
			/*
			#include <stdio.h>
			…
			*/
			import "C"
			```
[1]: https://pkg.go.dev/golang.org/x/tools/present#hdr-Command_Invocations