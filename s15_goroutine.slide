# Golang 安裝與環境設定
為什麼我要學習 Go
19:30 28 Mar 2020
Tags: golang, go, cht
Summary: This is a great document you want to read.
OldURL: former-path-for-this-doc

陳敬翔
資訊學系培訓師, 中華電信學院
oneleo@cht.com.tw
https://github.com/oneleo
@oneleo760823

// --------------------------------------------------

## 條件式與迴圈

.play -numbers -edit ./code/c15/c15p01goroutines/main.go /START OMIT/,/END OMIT/

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	1. 在 main 函式傳遞值給通道：_<del>go greeting(myChannel)</del> myChannel <- "hi from main"_
		- ↪ 您會得到「all goroutines are asleep - deadlock!」的錯誤。這個錯誤來自於 main goroutine 已經被鎖定了，等待通道接收其他 goroutine 的值。然而其他的 goroutine 仍未進行任何接收的運作，所以 main groutine 維持鎖定。

    2. 從調用 greeting 的地方移除 go 鍵詞：_<del>go </del>greeting(myChannel)_
		- ↪ 這會讓 greeting 函式在 main 的 goroutine 內執行。這也會造成鎖死的錯誤，跟上面的原因一樣：在 greeting 內的傳遞操作導致 main groutine 鎖定，但是並沒有任何一個 goroutine 執行接收的操作，所以這會停在鎖定狀態。

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

    3. 移除傳遞值給通道的這一行程式碼：_func greeting(myChannel chan string) { <del>myChannel <- "hi"</del> }_
		- ↪ 這也會造成鎖死，但是以不同的原因：main goroutine 嘗試接收值，但是沒有任何傳遞的操作。
 
    4. 移除從通道接收值的程式碼：_<del>fmt.Println(<-myChannel)</del>_
		- ↪ 在 greeting 內的傳遞操作導致 goroutine 鎖定。但是由於並沒有接收的操作來讓 main goroutine 也被鎖定，main 會立即終止，並且程式在沒有任何輸出的情況下結束。

// --------------------------------------------------

// --------------------------------------------------

## 鎖
```go
    package main

    import "fmt"

    func main() { // 單個 go 協程自己死鎖
        ch := make(chan int)
        ch <- 789
        num := <-ch
        fmt.Println(num)
    }
```
// --------------------------------------------------

## 鎖
```go
    package main

    import "fmt"

    func main() { // go 協程間 channel 坊問順序導致死鎖
        ch := make(chan int)
        num := <-ch
        fmt.Println("num = ", num)
        go func() {
            ch <- 789
        }()
    }
```
// --------------------------------------------------

## 正確寫法
```go
    package main

    import "fmt"

    func main() {
        ch := make(chan int)
        go func() {
            ch <- 789
        }()
        num := <-ch
        fmt.Println("num = ", num)
    }
```
// --------------------------------------------------

## 鎖
```go
    package main

    import "fmt"

    func main() { // 多個 go 協程，多個 channel 交叉死鎖
        ch1 := make(chan int)
        ch2 := make(chan int)

        go func() {
            for {
                select {
                case num := <-ch1:
                    ch2 <- num
                }
            }
        }()

        for {
            select {
            case num := <-ch2:
                ch1 <- num
            }
        }
    }
```
// --------------------------------------------------

## 參考資料

.link https://larrylu.blog/golang-goroutine-parallel-processing-d382e6d34a14 2018/09/17 - 分而治之 — 在 Golang 使用 Goroutine 進行平行運算

.link https://willh.gitbook.io/build-web-application-with-golang-zhtw/02.0/02.7 Go 語言基礎 - 併發

.link https://ithelp.ithome.com.tw/articles/10242047 2020/09/22 - 進程、線程、協程，傻傻分得清楚！

.link https://www.mdeditor.tw/pl/29Zi/zh-tw 2019/09/05 - golang 併發程式設計實戰

.link https://www.chainnews.com/zh-hant/articles/686881130283.htm 2020/08/19 - 兩萬字 40 張圖帶你參透併發編程

.link https://codertw.com/程式語言/651030/ 併發編程導論