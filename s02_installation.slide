# Golang 安裝與環境設定
為什麼我要學習 Go
19:30 28 Mar 2020
Tags: golang, go, cht
Summary: This is a great document you want to read.
OldURL: former-path-for-this-doc

陳敬翔
資訊學系培訓師, 中華電信學院
oneleo@cht.com.tw
https://github.com/oneleo
@oneleo760823

// --------------------------------------------------

## Golang 安裝與環境設定

- 有 3 種方法可以編寫 Go 語言（均以 Windows 作業系統為例）

	1. 使用線上 Go 語言編譯器
	2. 透過安裝檔在本機端建置 Go 語言開發環境
	3. 透過指令在本機端建置 Go 語言開發環境

// --------------------------------------------------

## Golang 安裝與環境設定

1. 使用 Go 語言遊樂場（線上編譯器）

	- 官方的線上編譯器：[The Go Playground][1]
	- 第三方的線上編譯器：[go-playground][2]
		- 【Run】：在 Google 伺服器上編譯並執行程式碼。
		- 【Format】：執行網頁版的 go fmt 標準格式化工具。
		- 【Imports】：執行【Format】時自動增減程式碼中有無用到的套件。
		- 【Share】：將當下的程式碼內容，產生獨一無二的分享連結。

[1]: https://play.golang.org/ "The Go Playground"
[2]: https://goplay.tools/ "第三方的 Go Playground"

.image ./images/i02/i02.00.01-playground.png _ 375

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼

.play -numbers -edit ./code/c02/c02p01firstgo/firstgo.go /START OMIT/,/END OMIT/

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	1. 刪除套件子句：_<del>package main</del>_
		- ↪ 每個 Go 檔案必須以套件子句作為開頭

	2. 刪除 import 陳述句：_<del>import "fmt"</del>_
		- ↪ 每個 Go 檔案必須透過匯入的方式引用套件

	3. 匯入第二個（沒用到的）套件：
		```
		import (
			"fmt"
			"strings"
		)
		```
		- ↪ Go 必須只匯入有在程式中引用的套件（這讓您的程式碼編譯得更快！）

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	4. 重新命名為 main 函式：_func <del>main</del>hello_
		- ↪ Go 會優先執行名為 main 的函式。

	5. 把 Println 改為小後調用：_fmt.<del>P</del>println("Hello, playground")_
		- ↪ Go 有區分大小寫，縱使 fmt.Println 可用，並不代表 fmt.println 也可行。 

	6. 把 Println 之前的套件名稱刪除：<del>fmt.</del>Println("Hello, playground")
		- ↪ Println 並不是 main 套件的函式，所以 Go 調用該函式需要它的套件名稱。

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：改變套件的別名

	1. 可將 "fmt" [設置一個別名][1]「f」
	2. 雖然可以設置省略別名[「.」][2]但是不建議，因為會和自己的函數混用
	3. 有時套件時別名設置[「_」][3]表示不引用，僅執行此套件的 init() 函式

[1]: https://golang.org/ref/spec#Import_declarations
[2]: https://golang.org/doc/effective_go.html#package-names
[3]: https://golang.org/doc/effective_go.html#blank_import

.play -numbers -edit ./code/c02/c02p02firstgo/firstgo.go

// --------------------------------------------------

## Golang 安裝與環境設定

2. 透過安裝檔在本機端建置 Go 語言開發環境步驟

	1. 安裝 [git][1] - 在於常用的 go get 指令會需要
	2. 安裝 [go 語言核心軟體][2]
		- 環境變數必須設置 GOPATH，且 PATH 變數需有 GOPATH\bin
	3. 安裝 [Visual Studio Code][3] - IDE 整合開發環境
	4. 在 vscode 裡安裝 [Go for Visual Studio Code][4] - vscode go 套件
	5. 在 vscode 裡安裝 Go for Visual Studio Code 的[相依性 Go 語言套件][5]
	6. （非必須）安裝 [GCC 編譯器][6] - C 語言編譯器（使用 cgo 時安裝）
		- MinGW 安裝參數：Architecture=x86_64、Threads=posix、Exception=seh
		- 並將 %ProgramFiles%\mingw-w64\x86_64-X.X.X-posix-seh-rt_vX-revX\mingw64\bin 加入至 PATH 環境變數內

[1]: https://git-scm.com/ "git"
[2]: https://golang.org/ "Go"
[3]: https://code.visualstudio.com/ "Visual Studio Code"
[4]: https://marketplace.visualstudio.com/items?itemName=golang.Go "Go for Visual Studio Code"
[5]: https://marketplace.visualstudio.com/items?itemName=golang.go#quick-start "Go for Visual Studio Code Extension Depends"
[6]: https://sourceforge.net/projects/mingw-w64/files/#mingw-w64-online-installer "GCC"

// --------------------------------------------------

## Golang 安裝與環境設定

2. 透過安裝檔在本機端建置 Go 語言開發環境步驟

- 在 vscode 裡安裝 [Go for Visual Studio Code][1] - vscode go 套件

[1]: https://marketplace.visualstudio.com/items?itemName=golang.Go "Go for Visual Studio Code"

.image ./images/i02/i02.00.02-vscode-go.png _ 900

// --------------------------------------------------

## Golang 安裝與環境設定

2. 透過安裝檔在本機端建置 Go 語言開發環境步驟

- 在 vscode 裡安裝 Go for Visual Studio Code 的[相依性 Go 語言套件][1]
- 【View】→【Command Palette... Ctrl+Shift+P】→【> Go: Install/Update Tools】

[1]: https://marketplace.visualstudio.com/items?itemName=golang.go#quick-start "Go for Visual Studio Code Extension Depends"

.image ./images/i02/i02.00.03-vscode-gopackage.png _ 625

// --------------------------------------------------

## Golang 安裝與環境設定

3. 透過指令在本機端建置 Go 語言開發環境步驟

	1. 透過 PowerShell（系統管理員權限）安裝 [Chocolatey][1] - Windows 套件管理工具
	2. 透過指令安裝 [git][2]（指定參數：不要將 git 加入至右鍵選單）
		```PowerShell
		> choco install -y git.install --params "/NoShellIntegration"
		> git --version
		```
	3. 透過指令安裝 [Go 語言核心軟體][3]、[Visual Studio Code][4] 與 [vscode go 套件][5]
		```PowerShell
		> choco install -y golang vscode vscode-go
		> go version
		> code --version
		```
	4. 在 vscode 裡安裝 Go for Visual Studio Code 的[相依性 Go 語言套件][6]
	5. （非必須）透過指令安裝 [GCC 編譯器][7]（使用 cgo 時安裝）
		```PowerShell
		> choco install -y mingw
		> gcc --version
		```

[1]: https://chocolatey.org/install "Chocolatey"
[2]: https://chocolatey.org/packages/git.install "Chocolatey - GIT (INSTALL)"
[3]: https://chocolatey.org/packages/golang "Chocolatey - GO PROGRAMMING LANGUAGE"
[4]: https://chocolatey.org/packages/vscode "Chocolatey - VISUAL STUDIO CODE"
[5]: https://marketplace.visualstudio.com/items?itemName=golang.Go "Go for Visual Studio Code"
[6]: https://marketplace.visualstudio.com/items?itemName=golang.go#quick-start "Go for Visual Studio Code Extension Depends"
[7]: https://chocolatey.org/packages/mingw "Chocolatey - MINGW-W64"

// --------------------------------------------------

## Golang 安裝與環境設定

3. 透過指令在本機端建置 Go 語言開發環境步驟

	- 使用指令的好處是：可製成一鍵式腳本建置 Go 環境
	- 可參考 [installgo.cmd][1]

[1]: ./code/c02/c02p02choco/installgo.cmd

.code ./code/c02/c02p02choco/installgo.cmd

// --------------------------------------------------

## 設置 vscode

// --------------------------------------------------

## 設置 vscode 環境

- 【File】→【Preferences】→【Settings Ctrl+,】
- 建議設置頭 2 項設定：

	```json
	{
		"files.autoSave": "onFocusChange",
		"go.useCodeSnippetsOnFunctionSuggest": true,
		"editor.fontSize": 16
	}
	```

// --------------------------------------------------

## Go 語言 Package 入門

// --------------------------------------------------

## Go 語言 Package 入門

- Go 1.11 版之前，程式碼均要在 _%GOPATH%\src_ 中開發
	- macOS、Linux：在 _$GOPATH/src_ 內
	- Windows PowerShell：在 _$env:GOPATH\src_ 內
	- Windows 命令提示字元：在 _%GOPATH%\src_ 內
	- 其他的 Go 變數可以在命令提示字元中輸入 _`> go env`_ 查看
- Go 1.11 版之後推出的 go module 可在任意處開發，亦統一了套件管理

.image ./images/i02/i02.00.04-gopath.png _ 750

// --------------------------------------------------

## Go 語言 Package 入門

- 建置我的 go 專案（hello）

	1. 建立 _%USERPROFILE%\Documents\hello_ 資料夾並使用 vscode 開啟
	2. 建立 _hello.go_ 檔案，並輸入以下程式碼後存檔（Ctrl+S）：
		```go
		package main
		 import "fmt"
		  func main() {
		   a, b := "hello,", "world!"
		    fmt.Println(a, b)
		     }
		```

.image ./images/i02/i02.00.05-myfirstgo.png _ 525

// --------------------------------------------------

## Go 語言 Package 入門

- 建置我的 go 專案（hello）

	4. 【Terminal】→【New Terminal Ctrl+Shift+`】
	5. 輸入以下指令訂立一個 Module 的（含路徑）的「完整名稱」
		```powershell
		> go mod init github.com/yourname/hello
		> go run hello.go	# 編譯並執行指定的指令原始程式檔案
		```

.image ./images/i02/i02.00.06-myfirstgo2.png _ 750

// --------------------------------------------------

## Go 語言 Package 入門

- 建置我的 go 專案（hello）

	- 其他 Go 的編譯相關的指令有
		```powershell
		> go build ./		# 編譯指定的 main 程式套件，並在當前目錄下產生可執行檔（若無 main 程式套件，則會在 %GOPATH%\pkg 下產生函式庫 .a 檔）
		> ./hello.exe
		> go install ./		# 編譯指定的 main 程式套件，並在 %GOPATH%\bin 下產生可執行檔
		> . $env:GOPATH\bin\hello.exe
		> go clean ./		# 將 go build 產生的檔案清除
		```

// --------------------------------------------------

## Go 語言 Package 入門

- 引用 go 套件（c01p01mymath）

	1. 回到 _hello.go_，在 **func main(){這裡}** 內最下方增加以下程式碼
		```go
		c, d, e := c01p01mymath.AddMinusMultiply(1, 2)
		fmt.Println(c, d, e)
		```
	2. 因為找不到 _c01p01mymath_ 套件，所以在 **import(這裡)** 內最下方增加以下程式碼
		```go
		"github.com/oneleo/golang-cht/code/c01/c01p01mymath"
		```
	3. 在下方【Terminal】中輸入以下指令：
		```powershell
		> go run hello.go
		```
		- 可以看到他正在網路上下載所需要的程式碼（相對網址為：[**github.com/oneleo/golang-cht**/tree/\<branchname\>/**code/c01/c01p01mymath**][1]），並且順利執行

[1]: https://github.com/oneleo/golang-cht/tree/master/code/c01/c01p01mymath

// --------------------------------------------------

## Go 語言 Package 入門

- 建置您自己的 go 套件（mymath）

	1. 繼續在 vscode 中建立 _mymath_ 資料夾
	2. 在下方【Terminal】中輸入以下指令
		```powershell
		> cd .\mymath\	# 切換目錄至 .\mymath\
		> go mod init "github.com/yourname/hello/mymath"	# 產生 go.mod 檔
		```
	3. 建立 _mymath\coolmath.go_ 檔案，並輸入以下程式碼後存檔（Ctrl+S）：
		```
		package mymath
		 func AddMinusMultiply(a, b int) (add, minus, multiply int) {
		  return a + b, a - b, a * b
		   }
		```
		- package 命名規範：
			- 名稱一定要和所處的資料夾名稱一致（main 是唯一例外）
			- 可為數字、小寫英文、減號、底線，但應力求簡潔明瞭、易於了解，儘量和標準套件名稱不衝突
			- 其他細節可參考此[官方文章][1]

[1]: https://golang.org/doc/effective_go.html#package-names "Package Name"

// --------------------------------------------------

## Go 語言 Package 入門

- 引用您自己建的 go 套件（mymath）

	1. 回到 _hello.go_，在 **func main(){這裡}** 內最下方增加以下程式碼
		```go
		f, g, h := mymath.AddMinusMultiply(4, 3)
		fmt.Println(f, g, h)
		```
	2. 因為找不到您自己的 _mymath_ 套件，所以在 **import(這裡)** 內增加以下程式碼
		```go
		"github.com/yourname/hello/mymath"
		```
	3. 在下方【Terminal】中輸入以下指令：
		```powershell
		> go run hello.go
		```
		- 可看到編譯器還是無法嘗試在網路空間 _github.com_ 上找到 _github.com/yourname/hello/mymath_ 套件（可能是私人網路，亦有可能是您的專案未上傳到對映的網址上）
		- 所以要使用 go mod 告訴編譯器此 _github.com/yourname/hello/mymath_ 套件目前在「本地端」或「其他網路空間」的確切位置

// --------------------------------------------------

## Go 語言 Package 入門

- 引用您自己建的 go 套件（mymath）

	4. 【Terminal】→【New Terminal Ctrl+Shift+`】
	5. 輸入以下指令，讓編譯器知道 _github.com/yourname/hello/mymath_ 的位置
		```powershell
		> go mod edit -replace="github.com/yourname/hello/mymath=./mymath"
		> go run hello.go		# 編譯並執行指定的指令原始程式檔案
		```
	6. 未來程式碼規模增加，引用到的套件必然會有增減，可使用下方 Go Module 指令進行掃描，自動在 go.mod 紀錄會用到的套件
		```powershell
		> go mod tidy
		```

: 注意：
: - 子套件（package）才可以使用 `go mod edit -replace=XXX` 來指定套件在本地端的路徑，因為子套件是跟著專案跑，所以可以一直使用相對路徑
: - 若是跨專案，若亂指定一個不存在的本地專案路徑，就算網路上有此專案，也不會自動下載專案內容下來

// --------------------------------------------------

## Go 語言 Package 入門

- 舊版 Go 1.11 世界的 Package 引用

	1. 建立 %GOPATH%\src\mymain\main.go 及 %GOPATH%\src\mypack\pack.go
	2. 在 %GOPATH%\src\mypack\pack.go 撰寫以下程式碼
	```go
	package mypack
	import "fmt"
	var var1, Var2 int
	func myfunc1(input int){
		fmt.Println("myfunc1 input =", input)
	}
	func Myfunc2(input int){
		fmt.Println("Myfunc2 input =", input)
	}
	```

// --------------------------------------------------

## Go 語言 Package 入門

- 舊版 Go 1.11 世界的 Package 引用

	3. 在 %GOPATH%\src\mymain\main.go 撰寫以下程式碼
	```go
	package main
	import (
		"fmt"
		"mypack"
	)
	func main(){
		fmt.Println("mypack.var1 =", mypack.var1)	// private variable
		fmt.Println("mypack.Var2 =", mypack.Var2)
		mypack.myfunc1(4)				// private function
		mypack.Myfunc2(3)	
	}
	```
	4. 【Terminal】→【New Terminal Ctrl+Shift+`】
	5. go run .\
	6. 請修正錯誤（改權限或註解掉），並觀察大小寫英文開頭、套件引用情形。
// --------------------------------------------------

## Go 語言 Package 入門

- 結論
	1. 套件的名稱（package XXX）一定要和所在的資料夾同名，但套件所處檔案的檔案名稱（XXX.go）不用和套件的名稱相同。
	2. 使用 [Go Module][1] 進行專案管理
		- 若要 import 在 _github.com_ 等網路空間專案的套件，直接引用（https:// 之後的）路徑即可，在編譯時（go run XXX）會自動下載需要的專案套件
		- 若要 import 非 _%GOROOT%\src_ 裡（注意不是 _%GOPATH%\src_）及網路上專案套件，就要使用 _`go mod edit -replace="XXX"`_ 指令告訴編譯器專案的套件在本地端或網路空間的位置，可參考[本篇文章][2]
		- 若您的程式碼專案有版控或同步至網路空間，建議在 `go mod init XXX` 時使用網路完整的專案路徑（https:// 之後的）作為專案名稱，以表示其[專案的唯一可識別性][3]。
		- 專案底下的每一個套件都要有一個 go.mod 檔，才能被其他專案引用

[1]: https://golang.org/ref/mod
[2]: https://golang.org/ref/mod#go-mod-file-replace "replace directive"
[3]: https://golang.org/ref/mod#glos-module-path

// --------------------------------------------------

## Go 語言 Package 入門

- 結論

	3. 使用 Go 1.11 前的 _%GOPATH%\src_ 模式
		- 若要 import 在 _github.com_ 等網路空間的套件，需要先使用 `go get -u XXX` 將套件下載到 _%GOPATH%\src_，再到程式內 import（src\ 之後的）套件路徑
		- 若要 import 已在 _%GOPATH%\src_ 裡的套件，直接引用（src\ 之後的）路徑即可