# Golang 安裝與環境設定
為什麼我要學習 Go
19:30 28 Mar 2020
Tags: golang, go, cht
Summary: This is a great document you want to read.
OldURL: former-path-for-this-doc

陳敬翔
資訊學系培訓師, 中華電信學院
oneleo@cht.com.tw
https://github.com/oneleo
@oneleo760823

// --------------------------------------------------

## Golang 安裝與環境設定

- 有 3 種方法可以編寫 Go 語言（均以 Windows 作業系統為例）

	1. 使用線上 Go 語言編譯器
	2. 透過安裝檔在本機端建置 Go 語言開發環境
	3. 透過指令在本機端建置 Go 語言開發環境

// --------------------------------------------------

## Golang 安裝與環境設定

1. 使用 Go 語言遊樂場（線上編譯器）

	- 官方的線上編譯器：[The Go Playground][1]
	- 第三方的線上編譯器：[go-playground][2]
		- 【Run】：在 Google 伺服器上編譯並執行程式碼。
		- 【Format】：執行網頁版的 go fmt 標準格式化工具。
		- 【Imports】：執行【Format】時自動增減程式碼中有無用到的套件。
		- 【Share】：將當下的程式碼內容，產生獨一無二的分享連結。

[1]: https://play.golang.org/ "The Go Playground"
[2]: https://goplay.tools/ "第三方的 Go Playground"

.image ./images/i02/i02.00.01-playground.png _ 375

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼

.play -numbers -edit ./code/c02/c02p01firstgo/firstgo.go /START OMIT/,/END OMIT/

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	1. 刪除套件子句：_<del>package main</del>_
		- ↪ 每個 Go 檔案必須以套件子句作為開頭

	2. 刪除 import 陳述句：_<del>import "fmt"</del>_
		- ↪ 每個 Go 檔案必須透過匯入的方式引用套件

	3. 匯入第二個（沒用到的）套件：
		```
		import (
			"fmt"
			"strings"
		)
		```
		- ↪ Go 必須只匯入有在程式中引用的套件（這讓您的程式碼編譯得更快！）

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	4. 重新命名為 main 函式：_func <del>main</del>hello_
		- ↪ Go 會優先執行名為 main 的函式。

	5. 把 Println 改為小後調用：_fmt.<del>P</del>println("Hello, playground")_
		- ↪ Go 有區分大小寫，縱使 fmt.Println 可用，並不代表 fmt.println 也可行。 

	6. 把 Println 之前的套件名稱刪除：<del>fmt.</del>Println("Hello, playground")
		- ↪ Println 並不是 main 套件的函式，所以 Go 調用該函式需要它的套件名稱。

// --------------------------------------------------

## Golang 安裝與環境設定

2. 透過安裝檔在本機端建置 Go 語言開發環境步驟

	1. 安裝 [git][1] - 在於常用的 go get 指令會需要
	2. 安裝 [go 語言核心軟體][2]
	3. 安裝 [Visual Studio Code][3] - IDE 整合開發環境
	4. 在 vscode 裡安裝 [Go for Visual Studio Code][4] - vscode go 套件
	5. 在 vscode 裡安裝 Go for Visual Studio Code 的[相依性 Go 語言套件][5]
	6. （非必須）安裝 [GCC 編譯器][6] - C 語言編譯器（使用 cgo 時安裝）
		- MinGW 安裝參數：Architecture=x86_64、Threads=posix、Exception=seh
		- 並將 %ProgramFiles%\mingw-w64\x86_64-X.X.X-posix-seh-rt_vX-revX\mingw64\bin 加入至 path 環境變數內

[1]: https://git-scm.com/ "git"
[2]: https://golang.org/ "Go"
[3]: https://code.visualstudio.com/ "Visual Studio Code"
[4]: https://marketplace.visualstudio.com/items?itemName=golang.Go "Go for Visual Studio Code"
[5]: https://marketplace.visualstudio.com/items?itemName=golang.go#quick-start "Go for Visual Studio Code Extension Depends"
[6]: https://sourceforge.net/projects/mingw-w64/files/#mingw-w64-online-installer "GCC"

// --------------------------------------------------

## Golang 安裝與環境設定

2. 透過安裝檔在本機端建置 Go 語言開發環境步驟

- 在 vscode 裡安裝 [Go for Visual Studio Code][1] - vscode go 套件

[1]: https://marketplace.visualstudio.com/items?itemName=golang.Go "Go for Visual Studio Code"

.image ./images/i02/i02.00.02-vscode-go.png _ 900

// --------------------------------------------------

## Golang 安裝與環境設定

2. 透過安裝檔在本機端建置 Go 語言開發環境步驟

- 在 vscode 裡安裝 Go for Visual Studio Code 的[相依性 Go 語言套件][1]
- 【View】→【Command Palette... Ctrl+Shift+P】→【> Go: Install/Update Tools】

[1]: https://marketplace.visualstudio.com/items?itemName=golang.go#quick-start "Go for Visual Studio Code Extension Depends"

.image ./images/i02/i02.00.03-vscode-gopackage.png _ 625

// --------------------------------------------------

## Golang 安裝與環境設定

3. 透過指令在本機端建置 Go 語言開發環境步驟

	1. 透過 PowerShell（系統管理員權限）安裝 [Chocolatey][1] - Windows 套件管理工具
	2. 透過指令安裝 [git][2]（指定參數：不要將 git 加入至右鍵選單）
		```PowerShell
		> choco install -y git.install --params "/NoShellIntegration"
		> git --version
		```
	3. 透過指令安裝 [Go 語言核心軟體][3]、[Visual Studio Code][4] 與 [vscode go 套件][5]
		```PowerShell
		> choco install -y golang vscode vscode-go
		> go version
		> code --version
		```
	4. 在 vscode 裡安裝 Go for Visual Studio Code 的[相依性 Go 語言套件][6]
	5. （非必須）透過指令安裝 [GCC 編譯器][7]（使用 cgo 時安裝）
		```PowerShell
		> choco install -y mingw
		> gcc --version
		```

[1]: https://chocolatey.org/install "Chocolatey"
[2]: https://chocolatey.org/packages/git.install "Chocolatey - GIT (INSTALL)"
[3]: https://chocolatey.org/packages/golang "Chocolatey - GO PROGRAMMING LANGUAGE"
[4]: https://chocolatey.org/packages/vscode "Chocolatey - VISUAL STUDIO CODE"
[5]: https://marketplace.visualstudio.com/items?itemName=golang.Go "Go for Visual Studio Code"
[6]: https://marketplace.visualstudio.com/items?itemName=golang.go#quick-start "Go for Visual Studio Code Extension Depends"
[7]: https://chocolatey.org/packages/mingw "Chocolatey - MINGW-W64"

// --------------------------------------------------

## Golang 安裝與環境設定

3. 透過指令在本機端建置 Go 語言開發環境步驟

	- 使用指令的好處是：可製成一鍵式腳本建置 Go 環境
	- 可參考 [installgo.cmd][1]

[1]: ./code/c02/c02p02choco/installgo.cmd

.code ./code/c02/c02p02choco/installgo.cmd

// --------------------------------------------------

## Go 語言 Package 入門

// --------------------------------------------------

## Go 語言 Package 入門

- Go 1.11 版之前，程式碼均要在 _%GOPATH%\src_ 中開發
	- macOS、Linux：在 _$GOPATH/src_ 內
	- Windows PowerShell：在 _$env:GOPATH\src_ 內
	- Windows 命令提示字元：在 _%GOPATH%\src_ 內
- Go 1.11 版之後推出的 go module 可在任意處開發，亦統一了套件管理

.image ./images/i02/i02.00.04-gopath.png _ 750

// --------------------------------------------------

## Go 語言 Package 入門

- 建置我的 go 專案（hello）

	1. 建立 _%USERPROFILE%\Documents\hello_ 資料夾並使用 vscode 開啟
	2. 建立 hello.go 檔案
	3. 輸入以下程式碼並存檔（Ctrl+S）：
		```go
		package main
		 import "fmt"
		  func main() {
		   a, b := "hello,", "world!"
		    fmt.Println(a, b)
		     }
		```

.image ./images/i02/i02.00.05-myfirstgo.png _ 525

// --------------------------------------------------

## Go 語言 Package 入門

- 建置我的 go 專案（hello）

	4. 【Terminal】→【New Terminal Ctrl+Shift+`】
	5. 輸入以下指令
		```powershell
		> go run hello.go	# 執行
		```

.image ./images/i02/i02.00.06-myfirstgo2.png _ 750

// --------------------------------------------------

## Go 語言 Package 入門

- 建置我的 go 專案

	3. 輸入以下指令
		```powershell
		> go mod init "github.com/myname/hello"	# 產生 go.mod 檔
		> go mod tidy			# 掃描有用到的套件，紀錄目前使用的套件版本
		```
// --------------------------------------------------

## Go 語言 Package 入門

- import 在 %GOPATH% 裡時
	- 直接引用 src/ 內的連結即可

// --------------------------------------------------

## Go 語言 Package 入門

- import 套件不是在 %GOPATH% 裡時
	- go mod [replace][1]

[1]: https://github.com/golang/go/wiki/Modules#when-should-i-use-the-replace-directive "When should I use the replace directive?"

// --------------------------------------------------

## Go 語言 Package 入門

{
    "files.autoSave": "onFocusChange",
    "go.useCodeSnippetsOnFunctionSuggest": true,
    "go.formatTool": "goimports",
    "editor.fontSize": 16,
    "editor.wordWrap": "on",
    "editor.detectIndentation": false,
    "editor.insertSpaces": false
}