# Golang 安裝與環境設定
為什麼我要學習 Go
19:30 28 Mar 2020
Tags: golang, go, cht
Summary: This is a great document you want to read.
OldURL: former-path-for-this-doc

陳敬翔
資訊學系培訓師, 中華電信學院
oneleo@cht.com.tw
https://github.com/oneleo
@oneleo760823

// --------------------------------------------------

## Golang 安裝與環境設定

// --------------------------------------------------

## 條件式與迴圈

.play -numbers -edit ./code/c04/c04p01conditionals/c04p01conditionals.go /START OMIT/,/END OMIT/

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	1. 在 for 鍵詞之後加上括號：_(for x := 1; x <= 3; x++)_
		- ↪ 有些程式語言需要在 `for` 迴圈的控制陳述句外加上小括號，但 Go 不只是不需要它們，它也不容許。

    2. 從初始陳述句移除「:」：_x <del>:</del>= 1_
		- ↪ 除非您的賦予值的變數已經在外層的範圍被宣告了（您通常不會這麼做），初始陳述句需要的是宣告，而不是賦值。

    3. 移除條件表示式中的「=」：_x <<del>=</del> 3_
		- ↪ 表示式 `x < 3` 會在抵達 3 之前終止（因為 `x <= 3` 的情境下依然是 true）。於是迴圈只會算到 2。

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

    4. 反轉條件表示式中的比較：_x >= 3_
		- ↪ 由於條件在迴圈開始之前就為 false（x 初始化為 1，這早就小於 3 了），迴圈連動都不動。

    5. 把後陳述句從 _x++_ 改成 _x--_
		- ↪ 變數 x 會開始從 1 倒數（1、0、-1、-2，依此類推），由於條件永遠不會大於 3，迴圈永遠不會停。

    6. 把 _fmt.Println(x)_ 移到迴圈區塊外
		```go
		func main() {
			for x := 1; x <= 3; x++ {

			}
			fmt.Println(x)
		}
		```
		- ↪ 在初始陳述句或者迴圈區塊內宣告的變數，只有在迴圈區塊內的範圍存在。

// --------------------------------------------------

## Golang 安裝與環境設定

- 您的第一支 Go 語言程式碼：假如您這麼做… **會發生錯誤！**

	4. 變數與值的數量不同：_length, width:=1.2<del>, 2.4</del>_
		- ↪ 您得提供每一個變數相對應的值，反過來說每一個值都得對應到一個變數。

	5. 移除有用到變數的程式碼：_<del>fmt.Println(customerName)</del>_
		- ↪ 所有的變數都應該在您的程式中被使用到。假如您移除了用到變數的程式碼，您也得移除該變數的宣告。（或使用「_」符號來忽略）
		
			```go
			quantity, length, width, _ := declaration03()
			```
// --------------------------------------------------